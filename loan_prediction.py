# -*- coding: utf-8 -*-
"""Loan_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TiAgEdjAnIaoAQUso_CHgTSUJL1AYLv9
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from time import time
from sklearn.utils import resample
import plotly.express as px
from collections import Counter

#model
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import  RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier


from astropy.table import Table

#metrics
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix, roc_curve, accuracy_score, f1_score, roc_auc_score, classification_report
#Data processing functions
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import model_selection
from sklearn.preprocessing import LabelEncoder



import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('Train_Data.csv')

df.shape

df.head()

df.describe()

df.isnull().sum()

sns.histplot(df['LoanAmount'], kde=True, bins=30, color='purple')
plt.title('Loanamonut Distribution')
plt.show()
sns.histplot(df['Dependents'], kde=True, bins=30, color='purple')
plt.title('Dependents Distribution')
plt.show()
sns.histplot(df['Loan_Amount_Term'], kde=True, bins=30, color='purple')
plt.title('Loan_Amount_Term Distribution')
plt.show()

df["Gender"].fillna(df["Gender"].mode()[0],inplace=True)
df["Married"].fillna(df["Married"].mode()[0],inplace=True)
df["Self_Employed"].fillna(df["Self_Employed"].mode()[0],inplace=True)
df["Credit_History"].fillna(df["Credit_History"].mode()[0],inplace=True)

df["Loan_Amount_Term"].fillna(df["Loan_Amount_Term"].median(),inplace=True)
df["Dependents"].fillna(df["Dependents"].mode()[0],inplace=True)
df["LoanAmount"].fillna(df["LoanAmount"].median(),inplace=True)
df.isnull().sum()

fig = px.histogram(df["Dependents"],x ="Dependents" ,y = "Dependents" )
fig.update_layout(title="dependets")
fig.show()

fig = px.histogram(df["CoapplicantIncome"],x ="CoapplicantIncome" ,y = "CoapplicantIncome" )
fig.update_layout(title="CoapplicantIncome")
fig.show()

fig = px.histogram(df["LoanAmount"],x ="LoanAmount" ,y = "LoanAmount" )
fig.update_layout(title="LoanAmount")
fig.show()

df["Dependents"] = df["Dependents"].replace('3+',int(3))
df["Dependents"] = df["Dependents"].replace('1',int(1))
df["Dependents"] = df["Dependents"].replace('2',int(2))
df["Dependents"] = df["Dependents"].replace('0',int(0))
df['Loan_Status'] = df['Loan_Status'].map({'Y': 1, 'N': 0})

dff=['Dependents','ApplicantIncome','LoanAmount','CoapplicantIncome','Loan_Status']
plt.figure(figsize=(10,6))
sns.heatmap(df[dff].corr(),annot=True,cmap="Blues")
plt.show()

plt.figure(figsize=(8, 5))
plt.subplot(1, 2, 1)
sns.boxplot(x=df['LoanAmount'])
plt.title('Box Plot')

plt.figure(figsize=(8, 5))
plt.subplot(1, 2, 1)
sns.boxplot(x=df['ApplicantIncome'])
plt.title('Box Plot')


plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.boxplot(x=df['CoapplicantIncome'])
plt.title('Box Plot')



'''# 4. Histogram
plt.subplot(1, 2, 2)
plt.hist(df['LoanAmount'], bins=10, edgecolor='k')
plt.title('Histogram')
plt.show()'''

df = df.dropna(subset=['LoanAmount'])

Q1 = df['LoanAmount'].quantile(0.25)
Q3 = df['LoanAmount'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_cleaned = df[(df['LoanAmount'] >= lower_bound) & (df['LoanAmount'] <= upper_bound)]
#print(df_cleaned)

plt.boxplot(df['LoanAmount'])
plt.title('Box Plot of LoanAmount (before Removing Outliers)')
plt.ylabel('Loan Amount')
plt.show()


plt.boxplot(df_cleaned['LoanAmount'])
plt.title('Box Plot of LoanAmount (After Removing Outliers)')
plt.ylabel('Loan Amount')
plt.show()

plt.scatter(df.index, df['LoanAmount'])
plt.title('Scatter Plot of LoanAmount')
plt.xlabel('Index')
plt.ylabel('Loan Amount')
plt.show()
plt.scatter(df_cleaned.index, df_cleaned['LoanAmount'])
plt.title('Scatter Plot of LoanAmount')
plt.xlabel('Index')
plt.ylabel('Loan Amount')
plt.show()

plt.scatter(df.index, df['ApplicantIncome'])
plt.title('Scatter Plot of ApplicantIncome')
plt.xlabel('Index')
plt.ylabel('ApplicantIncome')
plt.show()


df = df.dropna(subset=['ApplicantIncome'])

Q1 = df['ApplicantIncome'].quantile(0.30)
Q3 = df['ApplicantIncome'].quantile(0.70)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_app = df[(df['ApplicantIncome'] >= lower_bound) & (df['ApplicantIncome'] <= upper_bound)]

plt.scatter(df_app.index, df_app['ApplicantIncome'])
plt.title('Scatter Plot of ApplicantIncome')
plt.xlabel('Index')
plt.ylabel('ApplicantIncome')
plt.show()

plt.scatter(df.index, df['CoapplicantIncome'])
plt.title('Scatter Plot of CoapplicantIncome')
plt.xlabel('Index')
plt.ylabel('CoapplicantIncome')
plt.show()
sns.histplot(df['CoapplicantIncome'], kde=True, bins=30, color='purple')
plt.title('CoapplicantIncome Distribution')
plt.show()

df = df.dropna(subset=['CoapplicantIncome'])

Q1 = df['CoapplicantIncome'].quantile(0.30)
Q3 = df['CoapplicantIncome'].quantile(0.70)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df_app = df[(df['CoapplicantIncome'] >= lower_bound) & (df['CoapplicantIncome'] <= upper_bound)]

plt.scatter(df_app.index, df_app['CoapplicantIncome'])
plt.title('Scatter Plot of CoapplicantIncome')
plt.xlabel('Index')
plt.ylabel('CoapplicantIncome')
plt.show()


sns.histplot(df_app['CoapplicantIncome'], kde=True, bins=30, color='purple')
plt.title('CoapplicantIncome Distribution')
plt.show()

from sklearn.preprocessing import LabelEncoder


categorical_columns = ['Gender', 'Married', 'Dependents', 'Education', 'Self_Employed', 'Property_Area']


labelencoder = LabelEncoder()
for column in categorical_columns:
    df[column] = labelencoder.fit_transform(df[column].astype(str))

from sklearn.ensemble import AdaBoostClassifier , GradientBoostingClassifier , VotingClassifier , RandomForestClassifier

X = df.drop(["Loan_ID","Loan_Status",],axis=1)
y = df["Loan_Status"]


print("Feature importance by Random Forest:->\n")
RF = RandomForestClassifier()
RF.fit(X,y)
features = RF.feature_importances_
Columns = list(X.columns)
for i,j in enumerate(features):
    print(Columns[i],"->",j)
plt.figure(figsize=(16,5))
plt.title(label="RF")
plt.bar([x for x in range(len(features))],features)
plt.show()

dfff=df['Loan_Status'].value_counts()
dfff.plot(kind='bar')
plt.show()

new_data = df.copy()
df_majority = new_data[new_data.Loan_Status==1]
df_minority = new_data[new_data.Loan_Status==0]



df_manjority_downsampled = resample(df_majority,replace=False,n_samples=192,random_state=123)
df_downsampled = pd.concat([df_manjority_downsampled,df_minority])
print("Downsampled data:->\n",df_downsampled.Loan_Status.value_counts())


df_monority_upsampled = resample(df_minority,replace=True,n_samples=422,random_state=123)
df_upsampled = pd.concat([df_majority,df_monority_upsampled])
print("Upsampled data:->\n",df_upsampled.Loan_Status.value_counts())

X = new_data.drop(["Loan_Status","Loan_ID"],axis=1)
y = new_data["Loan_Status"]


X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42)

StSc = StandardScaler()
X_train  = StSc.fit_transform(X_train)
X_test  = StSc.fit_transform(X_test)

models = []

models.append(("RF",RandomForestClassifier()))
models.append(("DT",DecisionTreeClassifier()))


Model1 = RandomForestClassifier(n_estimators=1000,random_state=0,n_jobs=1000,max_depth=70,bootstrap=True)
Model1.fit(X_train,y_train)
y_pred = Model1.predict(X_test)
print("random",classification_report(y_pred,y_test))
print("RandomForestClassifier:>",accuracy_score(y_pred,y_test))

Model3 = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=100,max_features=1.0, max_leaf_nodes=10, min_samples_leaf=1,min_samples_split=2, min_weight_fraction_leaf=0.10, random_state=27, splitter='best')
Model3.fit(X_train,y_train)
y_pred = Model3.predict(X_test)
print(classification_report(y_pred,y_test))
print("DecisionTreeClassifier:>",accuracy_score(y_pred,y_test))

X = df_downsampled.drop(["Loan_Status","Loan_ID"],axis=1)
y = df_downsampled.Loan_Status



X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.1,random_state=0)



StSc = StandardScaler()
X_train  = StSc.fit_transform(X_train)
X_test  = StSc.fit_transform(X_test)


models = []

models.append(("RF",RandomForestClassifier()))
models.append(("DT",DecisionTreeClassifier()))







Model1 = RandomForestClassifier(n_estimators=1000,random_state=0,n_jobs=1000,max_depth=70,bootstrap=True)
Model1.fit(X_train,y_train)
y_pred = Model1.predict(X_test)
print("random",classification_report(y_pred,y_test))
print("RandomForestClassifier:>",accuracy_score(y_pred,y_test))

Model3 = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=100,max_features=1.0, max_leaf_nodes=10, min_samples_leaf=1,min_samples_split=2, min_weight_fraction_leaf=0.10, random_state=27, splitter='best')
Model3.fit(X_train,y_train)
y_pred = Model3.predict(X_test)
print(classification_report(y_pred,y_test))
print("DecisionTreeClassifier:>",accuracy_score(y_pred,y_test))

X = df_upsampled.drop(["Loan_Status","Loan_ID"],axis=1)
y = df_upsampled.Loan_Status


X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.1,random_state=0)



StSc = StandardScaler()
X_train  = StSc.fit_transform(X_train)
X_test  = StSc.fit_transform(X_test)



models = []

models.append(("RF",RandomForestClassifier()))
models.append(("DT",DecisionTreeClassifier()))







Model1 = RandomForestClassifier(n_estimators=1000,random_state=0,n_jobs=1000,max_depth=70,bootstrap=True)
Model1.fit(X_train,y_train)
y_pred = Model1.predict(X_test)
print("random",classification_report(y_pred,y_test))
print("RandomForestClassifier:>",accuracy_score(y_pred,y_test))

Model3 = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=100,max_features=1.0, max_leaf_nodes=10, min_samples_leaf=1,min_samples_split=2, min_weight_fraction_leaf=0.10, random_state=27, splitter='best')
Model3.fit(X_train,y_train)
y_pred = Model3.predict(X_test)
print(classification_report(y_pred,y_test))
print("DecisionTreeClassifier:>",accuracy_score(y_pred,y_test))

X = new_data.drop(["Loan_ID","Gender","Married","Education","Self_Employed","Loan_Amount_Term","Property_Area","Loan_Status"],axis=1)
#X = new_data.drop(["Loan_Status","Loan_ID"],axis=1)
y = new_data.Loan_Status



X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.1,random_state=0)


StSc = StandardScaler()
X_train  = StSc.fit_transform(X_train)
X_test  = StSc.fit_transform(X_test)


models = []

models.append(("RF",RandomForestClassifier()))
models.append(("DT",DecisionTreeClassifier()))






Model1 = RandomForestClassifier(n_estimators=1000,random_state=0,n_jobs=1000,max_depth=70,bootstrap=True)
Model1.fit(X_train,y_train)
y_pred = Model1.predict(X_test)
print("random",classification_report(y_pred,y_test))
print("RandomForestClassifier:>",accuracy_score(y_pred,y_test))



Model3 = DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=100,max_features=1.0, max_leaf_nodes=10, min_samples_leaf=1,min_samples_split=2, min_weight_fraction_leaf=0.10, random_state=27, splitter='best')
Model3.fit(X_train,y_train)
y_pred = Model3.predict(X_test)
print(classification_report(y_pred,y_test))
print("DecisionTreeClassifier:>",accuracy_score(y_pred,y_test))

